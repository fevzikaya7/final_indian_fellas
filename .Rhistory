sum(is.na(indian_ocean_df$dew_pt_temp))
# It is not healthy for the dew_pt_temp column of 1.3M rows
# to be "NaN" when I have 1.7M rows in total.This number is too high.
# So I'm removing the air_temp column.
indian_ocean_df <- subset(indian_ocean_df, select = -dew_pt_temp)
# [sea_surf_temp] column cleaning
sum(is.na(indian_ocean_df$sea_surf_temp))
# It consists of 266,722 rows of "NaN" data in total. Considering that I have
# a large data with 1.7M rows, it seems to be healthier to remove
# these rows instead of filling them with average values.
# I think the data I have is sufficient.
indian_ocean_df <- indian_ocean_df[!(is.na(indian_ocean_df['sea_surf_temp'])),]
# I need to separate the coastal zones. In the [station] column,
# the names of the regions are given, but they do not mean anything.
# Because while giving the data, the explanations of these columns
# were not made. So the regions I will separate them by longitude.
# The [longitude] column has height data. If [longitude] > 90°,
# I will consider it as the Australian coast, if [longitude] < 60°, I will
# consider the South African coast.
indian_ocean_df %<>% mutate(indian_ocean_df,
station = ifelse(longitude > 105, "australian_coast",
ifelse(longitude < 50, "southAfrica_coast", "middle_zone"))
)
# I want to get a specific latitude range. We have -60° to 10°.
# The lower part, namely -60° latitude, is very south.
# To observe the Indian Ocean dipole, I will set this range between -20° and 10°.
indian_ocean_df <- filter(indian_ocean_df,latitude >= -20)
# Date is taken from 2005 to 2020
indian_ocean_df <- filter(indian_ocean_df, (date >= 201601 & date < 202000))
heatMap_df <- indian_ocean_df %>%
group_by(date,latitude,longitude) %>%
summarise_at(vars(sea_surf_temp), list(monthly_average_temperature = mean))
l <- leaflet(heatMap_df) %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 0.5,
radius = ~20000) %>%
addTiles()
htmlwidgets::saveWidget(l,'investigated_area.html')
temp_df <- filter(heatMap_df, (date >= 201601 & date < 201701))
l <- leaflet(temp_df) %>%
addTiles() %>%
addHeatmap(lng = ~longitude, lat = ~latitude,
max=50, radius=10, blur=18, intensity = ~monthly_average_temperature)
htmlwidgets::saveWidget(l,'2016_2017_heatMap.html')
temp_df <- filter(heatMap_df, (date >= 201701 & date < 201801))
l <- leaflet(temp_df) %>%
addTiles() %>%
addHeatmap(lng = ~longitude, lat = ~latitude,
max=50, radius=10, blur=18, intensity = ~monthly_average_temperature)
htmlwidgets::saveWidget(l,'2017_2018_heatMap.html')
temp_df <- filter(heatMap_df, (date >= 201801 & date < 201901))
l <- leaflet(temp_df) %>%
addTiles() %>%
addHeatmap(lng = ~longitude, lat = ~latitude,
max=50, radius=10, blur=18, intensity = ~monthly_average_temperature)
htmlwidgets::saveWidget(l,'2018_2019_heatMap.html')
temp_df <- filter(heatMap_df, (date >= 201901 & date < 202001))
l <- leaflet(temp_df) %>%
addTiles() %>%
addHeatmap(lng = ~longitude, lat = ~latitude,
max=50, radius=10, blur=18, intensity = ~monthly_average_temperature)
htmlwidgets::saveWidget(l,'2019_2020_heatMap.html')
# I created the regions as different dataframes.
middle_indian_ocean_df <- filter(indian_ocean_df, station == 'middle_zone')
south_africa_coast_df <- filter(indian_ocean_df, station == 'southAfrica_coast')
australian_coast_df <- filter(indian_ocean_df, station == 'australian_coast')
# There is more than one data belonging to different time of the same day.
# I found the monthly average temperature values from the daily temperature data.
# I just need date and average temperature data. I removed the other columns.
middle_indian_ocean_df <- middle_indian_ocean_df %>%
group_by(date) %>%
summarise_at(vars(sea_surf_temp), list(monthly_average_temperature = mean))
##
south_africa_coast_df <- south_africa_coast_df %>%
group_by(date) %>%
summarise_at(vars(sea_surf_temp), list(monthly_average_temperature = mean))
##
australian_coast_df <- australian_coast_df %>%
group_by(date) %>%
summarise_at(vars(sea_surf_temp), list(monthly_average_temperature = mean))
# Lost years will be filled with average values.
temp_df <- data.frame(date = c(201908, 201903, 201812, 201710, 201706))
temp_df["monthly_average_temperature"] <-
mean(south_africa_coast_df$monthly_average_temperature)
south_africa_coast_df <- rbind(temp_df, south_africa_coast_df)
changeOf_temperature <- australian_coast_df$monthly_average_temperature - south_africa_coast_df$monthly_average_temperature
changeOf_temperature_df <- data.frame(changeOf_temperature)
changeOf_temperature_df["date"] <- australian_coast_df$date
changeOf_temperature_df["date"] <- as.character(changeOf_temperature_df$date)
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.7) +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
scale_x_discrete(
labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020")
) +
ggtitle("Indian Ocean Dipole")
# Australian fire data
burned_area_df <- read_excel("data/australia/burnedforestarea.xlsx")
burned_area_df <- filter(burned_area_df, Tarih >= 2016)
# A graph showing the difference between fire in 2019 compared to other years
burned_area <- ggplot(data=burned_area_df, aes(x=Tarih, y=`Yanan Alan (Hektar)`)) +
geom_bar(stat="identity", fill="steelblue", width=0.5) +
theme_classic() +
labs(x="", y="",
title = "AUSTRALIAN FIRE TOTAL AMOUNT OF FIELDS BURNED IN HECTARES") +
theme(plot.title = element_text(hjust=0.5),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.line.y = element_blank(), axis.ticks.x=element_blank(),
axis.text.x = element_text(face="bold", color="#993333",
size=13, angle=30)) +
scale_x_discrete(limits=2016:2021) +
geom_text(aes(label = `Yanan Alan (Hektar)`), vjust = -0.3)
burned_area
temp_df <- filter(heatMap_df, (date >= 201601 & date < 202001))
l <- leaflet(temp_df) %>%
addTiles() %>%
addHeatmap(lng = ~longitude, lat = ~latitude,
max=50, radius=10, blur=18, intensity = ~monthly_average_temperature)
htmlwidgets::saveWidget(l,'2016_2020_heatMap.html')
# A graph showing the difference between fire in 2019 compared to other years
burned_area <- ggplot(data=burned_area_df, aes(x=Tarih, y=`Yanan Alan (Hektar)`)) +
geom_bar(stat="identity", fill="steelblue", width=0.5) +
theme_classic() +
labs(x="", y="",
title = "AUSTRALIAN FIRE TOTAL AMOUNT OF FIELDS BURNED IN HECTARES") +
theme(plot.title = element_text(hjust=0.5. size=10),
# A graph showing the difference between fire in 2019 compared to other years
burned_area <- ggplot(data=burned_area_df, aes(x=Tarih, y=`Yanan Alan (Hektar)`)) +
geom_bar(stat="identity", fill="steelblue", width=0.5) +
theme_classic() +
labs(x="", y="",
title = "AUSTRALIAN FIRE TOTAL AMOUNT OF FIELDS BURNED IN HECTARES") +
theme(plot.title = element_text(hjust=0.5, size=10),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.line.y = element_blank(), axis.ticks.x=element_blank(),
axis.text.x = element_text(face="bold", color="#993333",
size=13, angle=30)) +
scale_x_discrete(limits=2016:2021) +
geom_text(aes(label = `Yanan Alan (Hektar)`), vjust = -0.3)
burned_area
# A graph showing the difference between fire in 2019 compared to other years
burned_area <- ggplot(data=burned_area_df, aes(x=Tarih, y=`Yanan Alan (Hektar)`)) +
geom_bar(stat="identity", fill="steelblue", width=0.5) +
theme_classic() +
labs(x="", y="",
title = "AUSTRALIAN FIRE TOTAL AMOUNT OF FIELDS BURNED IN HECTARES") +
theme(plot.title = element_text(hjust=0.5, size=15),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.line.y = element_blank(), axis.ticks.x=element_blank(),
axis.text.x = element_text(face="bold", color="#993333",
size=13, angle=30)) +
scale_x_discrete(limits=2016:2021) +
geom_text(aes(label = `Yanan Alan (Hektar)`), vjust = -0.3)
burned_area
# A graph showing the difference between fire in 2019 compared to other years
burned_area <- ggplot(data=burned_area_df, aes(x=Tarih, y=`Yanan Alan (Hektar)`)) +
geom_bar(stat="identity", fill="steelblue", width=0.5) +
theme_classic() +
labs(x="", y="",
title = "AUSTRALIAN FIRE TOTAL AMOUNT OF FIELDS BURNED IN HECTARES") +
theme(plot.title = element_text(hjust=0.5, size=13),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.line.y = element_blank(), axis.ticks.x=element_blank(),
axis.text.x = element_text(face="bold", color="#993333",
size=13, angle=30)) +
scale_x_discrete(limits=2016:2021) +
geom_text(aes(label = `Yanan Alan (Hektar)`), vjust = -0.3)
burned_area
# A graph showing the difference between fire in 2019 compared to other years
burned_area <- ggplot(data=burned_area_df, aes(x=Tarih, y=`Yanan Alan (Hektar)`)) +
geom_bar(stat="identity", fill="steelblue", width=0.5) +
theme_classic() +
labs(x="", y="",
title = "AUSTRALIAN FIRE TOTAL AMOUNT OF FIELDS BURNED IN HECTARES") +
theme(plot.title = element_text(hjust=0.5, size=13),
axis.ticks.y = element_blank(), axis.text.y = element_blank(),
axis.line.y = element_blank(), axis.ticks.x=element_blank(),
axis.text.x = element_text(face="bold", color="#993333",
size=13)) +
scale_x_discrete(limits=2016:2021) +
geom_text(aes(label = `Yanan Alan (Hektar)`), vjust = -0.3)
burned_area
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.7) +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
labs(y="Temperature Change") +
scale_x_discrete(labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020") ) +
ggtitle("Indian Ocean Dipole")
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.7) +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
labs(x="Date", y="Temperature Change") +
scale_x_discrete(labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020") ) +
ggtitle("Indian Ocean Dipole")
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.7, face="bold") +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
labs(x="Date", y="Temperature Change") +
scale_x_discrete(labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020") ) +
ggtitle("Indian Ocean Dipole")
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.7) +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
labs(x="Date", y="Temperature Change") +
scale_x_discrete(labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020") ) +
ggtitle("Indian Ocean Dipole")
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.8) +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
labs(x="Date", y="Temperature Change") +
scale_x_discrete(labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020") ) +
ggtitle("Indian Ocean Dipole")
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.75) +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
labs(x="Date", y="Temperature Change") +
scale_x_discrete(labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020") ) +
ggtitle("Indian Ocean Dipole")
ggplot(changeOf_temperature_df, aes(x=date, y=changeOf_temperature, group=1)) +
geom_line(color="#eb4e41",linetype = "solid", size=0.7) +
theme_excel() +
theme(panel.background = element_rect(fill = "#ebf1f2", colour = NA),
axis.ticks.x=element_blank()) +
labs(x="Date", y="Temperature Change") +
scale_x_discrete(labels=c("201601"="2016","201602"="","201603"="","201604"="","201605"="","201606"="","201607"="",
"201608"="","201609"="","201610"="","201611"="","201612"="",
"201701"="2017",  "201702"="", "201703"="", "201704"="", "201705"="", "201706"="",
"201707"="", "201708"="", "201709"="", "201710"="", "201711"="", "201712"="",
"201801"="2018", "201802"="", "201803"="", "201804"="", "201805"="", "201806"="",
"201807"="", "201808"="", "201809"="", "201810"="", "201811"="", "201812"="",
"201901"="2019", "201902"="", "201903"="", "201904"="", "201905"="", "201906"="",
"201907"="", "201908"="", "201909"="", "201910"="", "201911"="", "201912"=" 2020") ) +
ggtitle("Indian Ocean Dipole")
library(tidyverse)
library(readr)
library(magrittr)
library(ggplot2)
library(readxl)
library(hrbrthemes)
library(babynames)
library(ggrepel)
library(tidyr)
library(ggthemes)
library(leaflet)
library(leaflet.extras)
indian_ocean_df <- read_csv("data/indian_ocean/indian_ocean_df.csv",
show_col_types = FALSE)
# I chose the columns that I could possibly use.
indian_ocean_df <- indian_ocean_df[,c('STATION','DATE','LATITUDE','LONGITUDE','AIR_TEMP',
'DEW_PT_TEMP','SEA_SURF_TEMP')]
# I prefer the column names to be lowercase.
colnames(indian_ocean_df) <- tolower(colnames(indian_ocean_df))
# There are data at different times of the same day. We need monthly data.
# First I extracted the time data to be able to use group_by, just set it to be day/month.
# Thus, I can easily group_by. Because I will sort it.
indian_ocean_df['date'] = format(as.Date(as.POSIXct(indian_ocean_df$date)), "%Y%m")
indian_ocean_df$date <- as.integer(indian_ocean_df$date)
# [air_temp] column cleaning
sum(is.na(indian_ocean_df['air_temp']))
# It is not healthy for the air_temp column of 1.3M rows to be "NaN" when I have 1.7M rows in total.
# This number is too high. So I'm removing the air_temp column.
indian_ocean_df <- subset(indian_ocean_df, select = -air_temp)
# [dew_pt_temp] column cleaning
sum(is.na(indian_ocean_df$dew_pt_temp))
# It is not healthy for the dew_pt_temp column of 1.3M rows
# to be "NaN" when I have 1.7M rows in total.This number is too high.
# So I'm removing the air_temp column.
indian_ocean_df <- subset(indian_ocean_df, select = -dew_pt_temp)
# [sea_surf_temp] column cleaning
sum(is.na(indian_ocean_df$sea_surf_temp))
# It consists of 266,722 rows of "NaN" data in total. Considering that I have
# a large data with 1.7M rows, it seems to be healthier to remove
# these rows instead of filling them with average values.
# I think the data I have is sufficient.
indian_ocean_df <- indian_ocean_df[!(is.na(indian_ocean_df['sea_surf_temp'])),]
# I need to separate the coastal zones. In the [station] column,
# the names of the regions are given, but they do not mean anything.
# Because while giving the data, the explanations of these columns
# were not made. So the regions I will separate them by longitude.
# The [longitude] column has height data. If [longitude] > 90°,
# I will consider it as the Australian coast, if [longitude] < 60°, I will
# consider the South African coast.
indian_ocean_df %<>% mutate(indian_ocean_df,
station = ifelse(longitude > 105, "australian_coast",
ifelse(longitude < 50, "southAfrica_coast", "middle_zone"))
)
# I want to get a specific latitude range. We have -60° to 10°.
# The lower part, namely -60° latitude, is very south.
# To observe the Indian Ocean dipole, I will set this range between -20° and 10°.
indian_ocean_df <- filter(indian_ocean_df,latitude >= -20)
# Date is taken from 2005 to 2020
indian_ocean_df <- filter(indian_ocean_df, (date >= 201601 & date < 202000))
heatMap_df <- indian_ocean_df %>%
group_by(date,latitude,longitude) %>%
summarise_at(vars(sea_surf_temp), list(monthly_average_temperature = mean))
l <- leaflet(heatMap_df) %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 0.5,
radius = ~20000) %>%
addTiles()
htmlwidgets::saveWidget(l,'investigated_area.html')
temp_df <- filter(heatMap_df, (date >= 201601 & date < 202001))
l <- leaflet(temp_df) %>%
addTiles() %>%
addHeatmap(lng = ~longitude, lat = ~latitude,
max=50, radius=10, blur=18, intensity = ~monthly_average_temperature)
htmlwidgets::saveWidget(l,'2016_2020_heatMap.html')
View(`*tmp*`)
library(tidyverse)
library(readr)
library(magrittr)
library(ggplot2)
library(readxl)
library(hrbrthemes)
library(babynames)
library(ggrepel)
library(tidyr)
library(ggthemes)
library(leaflet)
library(leaflet.extras)
indian_ocean_df <- read_csv("data/indian_ocean/indian_ocean_df.csv",
show_col_types = FALSE)
# I chose the columns that I could possibly use.
indian_ocean_df <- indian_ocean_df[,c('STATION','DATE','LATITUDE','LONGITUDE','AIR_TEMP',
'DEW_PT_TEMP','SEA_SURF_TEMP')]
# I prefer the column names to be lowercase.
colnames(indian_ocean_df) <- tolower(colnames(indian_ocean_df))
# There are data at different times of the same day. We need monthly data.
# First I extracted the time data to be able to use group_by, just set it to be day/month.
# Thus, I can easily group_by. Because I will sort it.
indian_ocean_df['date'] = format(as.Date(as.POSIXct(indian_ocean_df$date)), "%Y%m")
indian_ocean_df$date <- as.integer(indian_ocean_df$date)
# [air_temp] column cleaning
sum(is.na(indian_ocean_df['air_temp']))
# It is not healthy for the air_temp column of 1.3M rows to be "NaN" when I have 1.7M rows in total.
# This number is too high. So I'm removing the air_temp column.
indian_ocean_df <- subset(indian_ocean_df, select = -air_temp)
# [dew_pt_temp] column cleaning
sum(is.na(indian_ocean_df$dew_pt_temp))
# It is not healthy for the dew_pt_temp column of 1.3M rows
# to be "NaN" when I have 1.7M rows in total.This number is too high.
# So I'm removing the air_temp column.
indian_ocean_df <- subset(indian_ocean_df, select = -dew_pt_temp)
# [sea_surf_temp] column cleaning
sum(is.na(indian_ocean_df$sea_surf_temp))
# It consists of 266,722 rows of "NaN" data in total. Considering that I have
# a large data with 1.7M rows, it seems to be healthier to remove
# these rows instead of filling them with average values.
# I think the data I have is sufficient.
indian_ocean_df <- indian_ocean_df[!(is.na(indian_ocean_df['sea_surf_temp'])),]
# I need to separate the coastal zones. In the [station] column,
# the names of the regions are given, but they do not mean anything.
# Because while giving the data, the explanations of these columns
# were not made. So the regions I will separate them by longitude.
# The [longitude] column has height data. If [longitude] > 90°,
# I will consider it as the Australian coast, if [longitude] < 60°, I will
# consider the South African coast.
indian_ocean_df %<>% mutate(indian_ocean_df,
station = ifelse(longitude > 105, "australian_coast",
ifelse(longitude < 50, "southAfrica_coast", "middle_zone"))
)
# I want to get a specific latitude range. We have -60° to 10°.
# The lower part, namely -60° latitude, is very south.
# To observe the Indian Ocean dipole, I will set this range between -20° and 10°.
indian_ocean_df <- filter(indian_ocean_df,latitude >= -20)
# Date is taken from 2005 to 2020
indian_ocean_df <- filter(indian_ocean_df, (date >= 201601 & date < 202000))
heatMap_df <- indian_ocean_df %>%
group_by(date,latitude,longitude) %>%
summarise_at(vars(sea_surf_temp), list(monthly_average_temperature = mean))
l <- leaflet(heatMap_df) %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 0.5,
radius = ~20000) %>%
addTiles()
htmlwidgets::saveWidget(l,'investigated_area.html')
temp_df <- filter(heatMap_df, (date >= 201601 & date < 202001))
l <- leaflet(temp_df) %>%
addTiles() %>%
addHeatmap(lng = ~longitude, lat = ~latitude,
max=50, radius=10, blur=18, intensity = ~monthly_average_temperature)
htmlwidgets::saveWidget(l,'2016_2020_heatMap.html')
View(temp_df)
View(heatMap_df)
library(tidyverse)
library(readr)
library(magrittr)
library(ggplot2)
library(readxl)
library(hrbrthemes)
library(babynames)
library(ggrepel)
library(tidyr)
library(ggthemes)
library(leaflet)
library(leaflet.extras)
indian_ocean_df <- read_csv("data/indian_ocean/indian_ocean_df.csv",
show_col_types = FALSE)
# I chose the columns that I could possibly use.
indian_ocean_df <- indian_ocean_df[,c('STATION','DATE','LATITUDE','LONGITUDE','AIR_TEMP',
'DEW_PT_TEMP','SEA_SURF_TEMP')]
# I prefer the column names to be lowercase.
colnames(indian_ocean_df) <- tolower(colnames(indian_ocean_df))
# There are data at different times of the same day. We need monthly data.
# First I extracted the time data to be able to use group_by, just set it to be day/month.
# Thus, I can easily group_by. Because I will sort it.
indian_ocean_df['date'] = format(as.Date(as.POSIXct(indian_ocean_df$date)), "%Y%m")
indian_ocean_df$date <- as.integer(indian_ocean_df$date)
# [air_temp] column cleaning
sum(is.na(indian_ocean_df['air_temp']))
# It is not healthy for the air_temp column of 1.3M rows to be "NaN" when I have 1.7M rows in total.
# This number is too high. So I'm removing the air_temp column.
indian_ocean_df <- subset(indian_ocean_df, select = -air_temp)
# [dew_pt_temp] column cleaning
sum(is.na(indian_ocean_df$dew_pt_temp))
# It is not healthy for the dew_pt_temp column of 1.3M rows
# to be "NaN" when I have 1.7M rows in total.This number is too high.
# So I'm removing the air_temp column.
indian_ocean_df <- subset(indian_ocean_df, select = -dew_pt_temp)
# [sea_surf_temp] column cleaning
sum(is.na(indian_ocean_df$sea_surf_temp))
# It consists of 266,722 rows of "NaN" data in total. Considering that I have
# a large data with 1.7M rows, it seems to be healthier to remove
# these rows instead of filling them with average values.
# I think the data I have is sufficient.
indian_ocean_df <- indian_ocean_df[!(is.na(indian_ocean_df['sea_surf_temp'])),]
# I need to separate the coastal zones. In the [station] column,
# the names of the regions are given, but they do not mean anything.
# Because while giving the data, the explanations of these columns
# were not made. So the regions I will separate them by longitude.
# The [longitude] column has height data. If [longitude] > 90°,
# I will consider it as the Australian coast, if [longitude] < 60°, I will
# consider the South African coast.
indian_ocean_df %<>% mutate(indian_ocean_df,
station = ifelse(longitude > 105, "australian_coast",
ifelse(longitude < 50, "southAfrica_coast", "middle_zone"))
)
# I want to get a specific latitude range. We have -60° to 10°.
# The lower part, namely -60° latitude, is very south.
# To observe the Indian Ocean dipole, I will set this range between -20° and 10°.
indian_ocean_df <- filter(indian_ocean_df,latitude >= -20)
# Date is taken from 2005 to 2020
indian_ocean_df <- filter(indian_ocean_df, (date >= 201601 & date < 202000))
heatMap_df <- indian_ocean_df %>%
group_by(date,latitude,longitude) %>%
summarise_at(vars(sea_surf_temp), list(monthly_average_temperature = mean))
l <- leaflet(heatMap_df) %>%
addCircles(lng = ~longitude, lat = ~latitude, weight = 0.5,
radius = ~20000) %>%
addTiles()
htmlwidgets::saveWidget(l,'investigated_area.html')
View(heatMap_df)
